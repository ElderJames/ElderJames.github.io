<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blazor on James Yeung</title>
    <link>/tags/blazor/</link>
    <description>Recent content in Blazor on James Yeung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.wangchucheng.com/&#34;&gt;C. Wang&lt;/a&gt; and &lt;a href=&#34;https://www.ruiqima.com/&#34;&gt;R. Ma&lt;/a&gt;
</copyright>
    <lastBuildDate>Tue, 16 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/blazor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blazor 面试 18 问</title>
      <link>/posts/blazor-interview-questions/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/blazor-interview-questions/</guid>
      <description>本文翻译自Blazor Interview Questions And Answers 
 问题一、 什么是 Blazor Blazor 是一个免费的、开源的、跨平台的 Web 框架，它允许开发人员使用 C# 和 .NET 构建现代的、可扩展的、跨平台的 Web 应用程序。Blazor 是由微软和开源社区开发的，其最初设计目的是为了让 C# 和 .NET 开发人员使用 C# 语言构建 Web 客户端应用程序。Blazor 是现代的、快速的、快速发展的。
大多数 web 客户端应用程序都是使用 JavaScript 编写的，其中代码主要在浏览器中运行。Blazor 框架允许开发人员使用 C# 代替 JavaScript 创建丰富的交互式用户界面。
Blazor同时支持客户端和服务器端编码。服务器端和客户端的应用逻辑都是用.NET编写的。
尽管代码是用.NET和C#编写的，但Blazor将用户界面渲染为HTML和CSS，以获得广泛的浏览器支持，包括移动浏览器。
下面是一个简单的Blazor代码示例，展示了 HTML 和 C# 如何在同一个文件中，以及如何从 HTML 代码中调用一个函数。
Blazor还可以与现代托管平台（如Docker）集成。
想要了解更多关于Blazor的信息，请从这里开始:使用。net Core介绍Blazor
问题二、 为什么要使用 Blazor? Blazor是为那些不熟悉JavaScript的开发人员开发的，他们大多拥有c#和。net背景。Blazor提供了以下优点：
 用C#代替JavaScript编写代码。 利用现有.NET库的.NET生态系统。 在服务器和客户端之间共享应用程序逻辑。 受益于.NET的性能、可靠性和安全性。 在Windows、Linux和macOS上使用Visual Studio保持生产力。 建立在一套通用的语言、框架和工具之上，这些语言、框架和工具稳定、功能丰富且易于使用。  问题三、什么类型的应用程序可以使用 Blazor 来构建？ Blazor支持两种类型的应用，Blazor Sever应用和Blazor WebAssembly应用。
Blazor Server 应用程序在运行在服务端的 ASP.</description>
    </item>
    
  </channel>
</rss>
