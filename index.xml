<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on James Yeung</title>
    <link>/</link>
    <description>Recent content in 首页 on James Yeung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.wangchucheng.com/&#34;&gt;C. Wang&lt;/a&gt; and &lt;a href=&#34;https://www.ruiqima.com/&#34;&gt;R. Ma&lt;/a&gt;
</copyright>
    <lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ant Design Blazor 组件库的路由复用多标签页介绍</title>
      <link>/posts/implement-reuse-tabs-using-antblazor/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/implement-reuse-tabs-using-antblazor/</guid>
      <description>前言 Blazor 是 .NET 最新的前端框架，可以基于 WebAssembly 或 SignalR （WebSocket）构建前端应用程序，基于 WebAssembly 托管模型的 Blazor 甚至可以离线运行。再加上可以共用 .NET 类库，能使代码量比以往的基于 JS 的前后端分离模型少 1/3。而且现在 .NET 开发者也可以使用自己熟悉的技术和经验来开发前端应用了，不同技术栈的开发人员之间的沟通成本也大大减少，从而再一次解放了生产力。
所以，Blazor 是 .NET 开发者的又一生产力技术！
通过使用 Blazor 社区生态开源的 UI 组件库，常用的组件都被封装了起来，用户再也不需要写 JS 和 CSS 了，使得 .NET 开发人员在社区里连连称赞。目前，已经有大量的基于 Blazor 构建的企业级应用程序被部署上线，逐渐被企业认可。
正文 什么是路由复用多标签页 本文标题中的路由复用，是 Angular 的 RouteReuseStrategy 中的概念，在中文社区也常被称作“多标签页”，主要的功能是当切换页面时，保持页面的状态，并且可以通过任意切换页面，当前展示的页面状态能够恢复。通常是被用在比较复杂的后台管理系统，用户可以在筛选了表格后，进入记录的详情页，再回到列表页后，仍然能保持原来的搜索条件、翻页数等等；也或者是填写表单时，需要去别的页面查看正确的信息，在回到表单时，表达上已填过的内容不会丢失。
而由于天然的能复用 C# 代码的优势， Blazor 通常被用于构建后台管理系统，所以使用标签页就成为了普遍的需求。然鹅，Blazor 官方团队并没有给我们直接提供这样的组件，所以就需要社区的小伙伴来实现了。
但是纵观社区中的几个开源组件库，都只是实现了通用的 Tabs 标签页组件，只能当作切换面板来使用。要用来实现“多标签页”的功能，要么不支持，要么还得要直接或间接地依赖自己菜单组件和布局组件，再要依赖页面文件路径，拼接出页面组件的类型，最后用反射来创建页面组件……
虽然说它们确实实现了多标签页的功能，但是实现方式不甚优雅。耦合度非常高，只能在组件库自己的框架布局中使用，而不能单独拎出来使用。另外，反射的性能也不好，还要把页面按照约定放置，对用户种种制约。
当然，社区中还流传一个比较认可的方案，就是 BlazorDemoMultiPagesTab 项目。它提供了一个原型，通过结合 Blazor 内置的路由组件实现了路由多标签页。但问题是它只是一个 demo，只实现了原理，代码比较凌乱，作者也没有再做整理，也没有封装成组件，如果想在自己项目中使用起来，肯定会薅秃自己的头发的。
Ant Design Blazor 中的 ReuseTabs 组件 最近，在 Ant Design Blazor 组件库中实现多标签页组件的呼声日益高涨。于是，我利用周末时间，基于 BlazorDemoMultiPagesTab 中提供的思路，结合 Blazor 内置路由组件实现了基于 Tabs 组件的 ReuseTabs 组件。</description>
    </item>
    
    <item>
      <title>Blazor 面试 18 问</title>
      <link>/posts/blazor-interview-questions/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/blazor-interview-questions/</guid>
      <description>本文翻译自Blazor Interview Questions And Answers 
 问题一、 什么是 Blazor Blazor 是一个免费的、开源的、跨平台的 Web 框架，它允许开发人员使用 C# 和 .NET 构建现代的、可扩展的、跨平台的 Web 应用程序。Blazor 是由微软和开源社区开发的，其最初设计目的是为了让 C# 和 .NET 开发人员使用 C# 语言构建 Web 客户端应用程序。Blazor 是现代的、快速的、快速发展的。
大多数 web 客户端应用程序都是使用 JavaScript 编写的，其中代码主要在浏览器中运行。Blazor 框架允许开发人员使用 C# 代替 JavaScript 创建丰富的交互式用户界面。
Blazor 同时支持客户端和服务器端编码。服务器端和客户端的应用逻辑都是用.NET 编写的。
尽管代码是用.NET 和 C#编写的，但 Blazor 将用户界面渲染为 HTML 和 CSS，以获得广泛的浏览器支持，包括移动浏览器。
下面是一个简单的 Blazor 代码示例，展示了 HTML 和 C# 如何在同一个文件中，以及如何从 HTML 代码中调用一个函数。
Blazor 还可以与现代托管平台（如 Docker）集成。
想要了解更多关于 Blazor 的信息，请从这里开始:使用。net Core 介绍 Blazor
问题二、 为什么要使用 Blazor? Blazor 是为那些不熟悉 JavaScript 的开发人员开发的，他们大多拥有 c#和。net 背景。Blazor 提供了以下优点：</description>
    </item>
    
    <item>
      <title>ASP.NET Core 在 .NET 6 Preview 2 中的更新</title>
      <link>/posts/asp-net-core-updates-in-net-6-preview-2/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/asp-net-core-updates-in-net-6-preview-2/</guid>
      <description>原文：《ASP.NET Core updates in .NET 6 Preview 2》，作者 Daniel Roth
  .NET 6 预览版 2 现已推出，其中包括许多对 ASP.NET Core 的新改进。
以下是本次预览版的新内容：
 Razor 编译器更新为使用 Source Generators Blazor 支持自定义事件参数 增加 MVC 视图和 Razor 页面的 CSS 隔离 Blazor 支持从祖先组件中推断组件的泛型类型 Blazor 应用程序支持保留预渲染时的状态 SignalR – 支持 Nullable 标注  马上开始 想开始在 .NET 6 Preview 2 中使用 ASP.NET Core，请先安装 .NET 6 SDK。
如果您正在 Windows 上使用 Visual Studio，我们建议安装 Visual Studio 2019 16.10 的最新预览版。如果您在 macOS 上，我们建议安装 Visual Studio 2019 for Mac 8.</description>
    </item>
    
  </channel>
</rss>
